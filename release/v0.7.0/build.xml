<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2010. Agwego Enterprises Inc.
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  ~
  ~ If you modify this software a credit would be nice
  -
  - $Id$
  -
  - Author: Tim Desjardins
  -->

<project name="fuzztester" basedir="." default="usage">
    <property environment="env"/>
	<property file="${basedir}/opt/personal/${env.USER}/build.${env.HOSTNAME}.properties"/>
	<property file="build.properties"/>
	<property name="name" value="fuzztester"/>

    <property name="src.dir" value="src"/>
	<property name="deploy.dir" value="deploy"/>
    <property name="build.dir" value="build"/>
	<property name="test.dir" value="test"/>
    <property name="doc.dir" value="doc"/>

    <property name="out.prod.dir" value="${build.dir}/prod"/>
    <property name="out.test.dir" value="${build.dir}/test"/>
    <property name="package.dir" value="package"/>

    <property name="coverage.dir" value="${basedir}/doc/emma" />     <!-- directory which emma coverage reports will be written to -->
    <property name="instrumented.dir" value="${build.dir}/instrumented" />    <!-- directory which emma instrumentation classes will be written to -->

    <mkdir dir="${build.dir}"/>

    <path id="classpath-libs">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <fileset dir="${basedir}/lib" id="package-dependency-libs">
        <exclude name="junit*"/>
        <exclude name="*src*"/>
        <include name="*.jar"/>
        <!--include name="gson.LICENSE"/-->
        <!--include name="commons.LICENSE.txt"/-->               
    </fileset>

    <fileset dir="${basedir}/lib" id="package-dependency-collateral">
        <include name="gson.LICENSE"/>
        <include name="commons.LICENSE.txt"/>
    </fileset>

    <path id="classpath-prod">
        <pathelement path="${out.prod.dir}"/>
    </path>

    <path id="classpath-test">
        <pathelement path="${out.test.dir}"/>         
    </path>

    <path id="classpath-coverage">
        <fileset  dir="${basedir}/lib-internal">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="instrumented">
        <pathelement path="${instrumented.dir}"/>
    </path>

    <!-- Load cobertura custom tasks so that they can be used in ANT -->
    <taskdef classpathref="classpath-coverage" resource="tasks.properties"/>

    <target name="usage" depends="get-revision">
        <echo message=""/>
        <echo message="${name} build file"/>
        <echo message="------------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>

        <echo message="build                 --> Build the production application"/>
        <echo message="package               --> Package the application"/>

        <echo message="instrument            --> Instrument the with Cobertura for code coverage"/>
        <echo message="coverage              --> Generate a code coverage report"/>
        
        <echo message="tests                 --> run batch tests"/>
        <echo message="all-tests              --> run all tests (consolidated)"/>
        <echo message="doc                   --> create javadoc"/>

        <echo message="clean                 --> cleanup"/>
        <echo message="spotless              --> revert to pristine"/>
        <echo message="version               --> what's the current version information"/>

        <echo message=""/>

	    <echo message="HOSTNAME: ${env.HOSTNAME}"/>
	    <echo message="USER: ${env.USER}"/>
	    <echo message="basedir: ${basedir}"/>
        <echo message="revision: ${revision.number}"/>
    </target>

    <!-- release properties -->
	<target name="release_properties" depends="get-revision" description="build the WAR file for release embeds build information">
		<echo message="revision.number = ${revision.number}" />
	    <touch file="${out.prod.dir}/build_tag.properties"/>
	    <propertyfile comment="Build Information" file="${out.prod.dir}/build_tag.properties">
		    <entry key="build.date" type="date" pattern="EEEE MMM dd, yyyy" value="now"/>
		    <entry key="build.timestamp" type="date" pattern="yyyy-MM-dd'T'HH:mm:ss" value="now"/>
		    <entry key="build.user.name" value="${user.name}"/>
		    <entry key="build.computer" value="${env.COMPUTERNAME}"/>
		    <entry key="build.revision_number" value="${revision.number}"/>
            <entry key="fuzz.version" value="${fuzz.version}"/>
	    </propertyfile>
	</target>

    <!-- Instrument the class files. -->
    <target name="instrument">
        <!--delete file="${build.dir}/cobertura.ser"/-->
        <delete file="cobertura.ser"/> 

        <cobertura-instrument todir="${instrumented.dir}" >
            <fileset dir="${out.prod.dir}/com/agwego">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="coverage" depends="buildtests, instrument, all-tests">
        <cobertura-report srcdir="${src.dir}" destdir="${doc.dir}/coverage" />
    </target>

    <target name="build" description="Compile main source tree java files">
        <mkdir dir="${out.prod.dir}"/>
        <javac destdir="${out.prod.dir}" source="1.5" target="1.5" debug="true" deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="classpath-prod"/>
            <classpath refid="classpath-libs"/>

            <!--compilerarg  value="-Xlint"/-->
        </javac>
        <copy file="${src.dir}/log4j.properties" tofile="${out.prod.dir}/log4j.properties" overwrite="true"/>
    </target>

    <target name="jar" depends="build,release_properties" description="Create the archive">
        <jar destfile="fuzz-tester-${fuzz.version}.jar" basedir="${out.prod.dir}">        
            <manifest>
               <attribute name="Main-Class" value="com.agwego.fuzz.Version"/>
            </manifest>
        </jar>
    </target>

    <target name="package" depends="jar, package-dependencies, examples" description="Package fuzz tester">
        <property name="pkg.dir" value="${package.dir}/fuzz-tester-${fuzz.version}"/>
        <mkdir dir="${pkg.dir}"/>
        <copy file="fuzz-tester-${fuzz.version}.jar" todir="${pkg.dir}"/>
        <copy file="${doc.dir}/LICENSE" todir="${pkg.dir}"/>
        <copy file="${doc.dir}/README" todir="${pkg.dir}"/>
    </target>

	<target name="package-dependencies">
        <property name="pkg.dir" value="${package.dir}/fuzz-tester-${fuzz.version}"/>
		<property name="package.jar.name" value="fuzz-tester-dependencies-${fuzz.version}.jar"/>
		<property name="package.jar" value="${pkg.dir}/${package.jar.name}"/>

        <mkdir dir="${pkg.dir}"/>
        <delete file="${package.jar}"/>

		<echo message="Packaging Dependencies: ${package.jar}"/>

		<jar destfile="${pkg.dir}/temp_final.jar" filesetmanifest="skip">
			<zipgroupfileset refid="package-dependency-libs"/>
		</jar>

		<zip destfile="${package.jar}">
			<zipfileset src="${pkg.dir}/temp_final.jar" excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
            <fileset refid="package-dependency-collateral"/>
		</zip>

        <echo message="Updated examples lib"/>
        <copy file="fuzz-tester-${fuzz.version}.jar" todir="${basedir}/examples/lib"/>
        <checksum file="fuzz-tester-${fuzz.version}.jar" todir="${pkg.dir}"/>
        <copy file="${package.jar}" todir="${basedir}/examples/lib"/>
        <checksum file="${package.jar}" todir="${pkg.dir}"/> 

		<delete file="${pkg.dir}/temp_final.jar"/>
	</target>

    <target name="examples" description="Zip up the examples">
        <property name="pkg.dir" value="${package.dir}/fuzz-tester-${fuzz.version}"/>
        <property name="package.jar.name" value="fuzz-tester-dependencies-${fuzz.version}.jar"/>
        <delete>
            <fileset dir="${basedir}/examples/lib">
                <include name="*.jar"/>
            </fileset>
        </delete>

        <copy file="${pkg.dir}/${package.jar.name}" todir="${basedir}/examples/lib"/>
        <copy file="fuzz-tester-${fuzz.version}.jar" todir="${basedir}/examples/lib"/>
        <copy todir="${basedir}/examples/lib">
            <fileset dir="${basedir}/lib">
                <include name="junit-*.jar" />
                <exclude name="junit-*-src.jar"/>
                <exclude name="junit-dep-*.jar"/>
            </fileset>
        </copy>

        <mkdir dir="${pkg.dir}"/>
        <zip
            destfile="${pkg.dir}/fuzz-tester-examples-${fuzz.version}.zip"
            basedir="${basedir}/examples"
            excludes="**/build/** **/*.class"
            />
        <checksum file="${pkg.dir}/fuzz-tester-examples-${fuzz.version}.zip" todir="${pkg.dir}"/> 
    </target>

    <target name="buildtests" depends="build" description="Compile test tree java files">    
        <mkdir dir="${out.test.dir}"/>
        <copy file="${src.dir}/log4j.properties" tofile="${out.test.dir}/log4j.properties" overwrite="true"/>
        <javac destdir="${out.test.dir}" source="1.5" target="1.5" debug="true" deprecation="false" optimize="false" failonerror="true">
            <src path="${test.dir}"/>
            <classpath refid="classpath-test"/>
            <classpath refid="classpath-prod"/>
            <classpath refid="classpath-libs"/>
        </javac>
    </target>

    <target name="tests" depends="buildtests" description="Run batch tests">
        <fileset dir="${out.test.dir}" id="test.classes">
            <include name="**/*Test.class" />
        </fileset>
        <property name="test.classes.prop" refid="test.classes"/>
        <echo message="${test.classes.prop}"/>

        <junit printsummary="on" fork="true" haltonfailure="true" failureproperty="tests.failed" showoutput="true">
            <classpath refid="classpath-test"/>
            <classpath refid="classpath-prod"/>            
            <classpath refid="classpath-libs"/>

            <formatter type="plain" usefile="false" if="junit.formatter.use"/>

            <batchtest>
                <fileset refid="test.classes"/>
            </batchtest>
        </junit>

        <fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
        </fail>
    </target>

    <target name="all-tests" depends="buildtests" description="Run All Tests Suite">
        <junit printsummary="on" fork="true" haltonfailure="false" failureproperty="tests.failed" showoutput="true">
            <classpath location="${instrumented.dir}"/>
            <classpath refid="classpath-coverage"/>
            <classpath refid="classpath-test"/>
            <classpath refid="classpath-prod"/>                        
            <classpath refid="classpath-libs"/>

            <formatter type="plain" usefile="false" if="junit.formatter.use"/>
            <test name="com.agwego.AllTests" />
        </junit>

        <fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
        </fail>        
    </target>

    <target name="clean" description="Clean output directories">
        <delete quiet="false" failonerror="false">
            <fileset dir="${build.dir}">
                <include name="**/*.class"/>
            </fileset>
        </delete>
        <delete file="coverage-error.log"/>
        <mkdir dir="${out.prod.dir}"/>
	    <touch file="${out.prod.dir}/build_tag.properties"/>
    </target>

	<target name="spotless" depends="clean" description="Clean and revert to pristine">
	    <delete quiet="false">
	        <fileset dir="${basedir}">
	            <include name="**/svn-commit.tmp*"/>
                <include name="fuzz-tester-*.jar"/>
	        </fileset>
			<fileset dir="${out.prod.dir}">
	            <include name="build_tag.properties"/>
            </fileset>
	    </delete>
        <delete dir="${build.dir}" includeEmptyDirs="true"/>
        <delete dir="${package.dir}" includeEmptyDirs="true"/>
        <delete>
            <fileset dir="${basedir}/examples/lib">
                <include name="*.jar"/>
            </fileset>
        </delete>
	</target>

    <target name="version" depends="jar">
        <java jar="fuzz-tester-${fuzz.version}.jar" fork="true"/>
    </target>

	<target name="get-revision" description="Sets property 'revision.number' to the head svn revision number">
        <property name="revision" value="HEAD"/>

        <!-- find out revision number of the current working dir -->
        <exec executable="svnversion" outputproperty="svnlog.out">
            <arg line="-n"/>
        </exec>

        <!-- need ant-contrib.jar for this in lib dir of ant install -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
        <propertyregex property="revision.number" input="${svnlog.out}" select="\1">
            <regexp pattern="([0-9]*).+"/>
        </propertyregex>
    </target>

    <target name="doc" description="Generate the javadoc">
        <javadoc
            packagenames="com.agwego.*"
            sourcepath="${src.dir}"
            destdir="${doc.dir}/api"
            access="private"
            author="true"
            version="true"
            use="true"
            windowtitle="FuzzTester API"
            classpathref="classpath-libs">
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://google-gson.googlecode.com/svn/tags/1.3/docs/javadocs/"/>
            <link href="http://kentbeck.github.com/junit/javadoc/latest/"/>
            
            <bottom><![CDATA[<i>Copyright &#169; 2010 Agwego Enterprise Inc. Tim Desjardins - All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>
</project>
