#summary Getting Started

= Dependencies =

FuzzTester is a [http://junit.org/ jUnit] add on, it integrates with all jUnit test runners.

== Required Jars ==
 * [http://github.com/KentBeck/junit/downloads JUnit 4] tested with 4.8.1
 * [http://code.google.com/p/google-gson/ GSON 1.4]
 * [http://commons.apache.org/beanutils/ commons-beanutils 1.7.0]
 * [http://commons.apache.org/collections/ commons-collections 3.2.1]
 * [http://commons.apache.org/lang/ commons-lang 2.4]
 * [http://commons.apache.org/logging/ commons-logging 1.0.4]

Note that included in the release is a fuzz-tester-dependencies-version.jar that rolls up the Apache Commons and GSON libraries.

== Simple Test Case ==

 # Annotate your class with the fuzztester-runner and the test parameters which is a file or files with your test data
{{{
1 @RunWith( FuzzTester.class )
2 @Parameters( TestDirectory = "test/com/agwego/fuzz/examples", Prefix = "GettingStarted" )
3 public class GettingStartedTest {
}}}
  # uses the JUnit @RunWith annotation to say use the fuzztester runner
  # provides the test file(s) location and name(s)
  <br/>
 # Mark your test fixtures with the @Fuzz annotation.
{{{
@Fuzz
public void truncExample( final String input, final Integer endIndex, final String expected )
{
    assertEquals( expected, GettingStarted.trunc( input, endIndex ));
}
}}}
  A couple of important thing to note: unlike JUnit tests which don't take any arguments, Fuzz Tester test fixtures can take arguments, how many and what types are up to you and are largely dictated by the methods you're testing. Test fixtures tend to be rather concise which makes the tests easier to understand since data handling/manipulation isn't interwoven with the test code.
 # Create your test data using the Fuzz-Tester JSON format, the easiest thing to do is copy one of the examples and modify it for your tests, as and example:
{{{
{
1    "unitTest" : [
        {
2            "ignore" : false,
3            "comment" : "Getting Started Trunc Test (input, length, expected)",
4            "method" : "truncExample",
5            "testCases" : [
6                { "args" : [ "", 6, "" ] },
7                { "args" : [ "123456789", -1, "123456789" ] },
8                { "args" : [ "123456789", 0, "" ] },
9                { "args" : [ null, 1, null ], "pass" : true }
            ]
        }
    ]
}
}}}
  1. "unitTest" simply indicates this is a test.
  2. "ignore" optional item defaults to fault but allows you to ignore the test method
  3. "comment" optional item allows you to provide commentary
  4. "method" the name of the method to execute the testCases on
  5. "testCases" is an array of testCase objects
  6-9. Are individual tests cases with arguments to the test method - in this case tuncExample - the arguments are represented as an array, for each "args" object the test method will be executed, there is also the ability to assert the tests assert since you may expect some tests to fail you can test for that by using "pass" : false.