#summary Detailed File Format for test cases in the JSON format

= JSON Object format =

Fuzz Testers test cases are codified in the Javascript Object Notation (JSON) format see [http://json.org/ JSON.org] for details concerning escaping special characters, types, etc. 

== Simple Types ==
 * int, long, short, byte -> [http://download-llnw.oracle.com/javase/6/docs/api/java/lang/Integer.html java.lang.Integer] (if possible)
 * float, double -> [http://download-llnw.oracle.com/javase/6/docs/api/java/lang/Double.html java.lang.Double]
 * boolean -> [http://download-llnw.oracle.com/javase/6/docs/api/java/lang/Boolean.html java.lang.Boolean]
 * string -> [http://download-llnw.oracle.com/javase/6/docs/api/java/lang/String.html  java.lang.String]
 * null
 * arrays of simple types or simple json objects
 * simple planar objects(beans) (i.e. no object graphs yet, any object that is composed of simple types from above)

== Test Format ==

Here's an example JSON test file,

{{{
{
    "only" : [ "truncExample", "anotherExample" ], # optional, a list of method names to run
    "unitTest" : [ # required
        {
            "skip" : true,  # optional, default false, skip this method in its entirety 
            "comment" : "Getting Started Trunc Test (input, length, expected)",  # optional
            "method" : "truncExample",  # required the method name to test
            "testCases" : [  # required, list of test cases to run
                { "args" : [ "12", 6, "12" ] },
                { "args" : [ "123456", 6, "123456" ] },
                { "args" : [ "123456789", -1, "123456789" ] },
                {
                  "args" : [ null, 1, null ],
                  "pass" : false, # optional, assert the result of the test, default true
                }
            ]
        },
        {
            "comment" : "Getting Started except(input, expected)",
            "method" : "exceptionExample",
            "testCases" : [
                {
                    "name" : "some descriptive text", # optional
                    "args" : [ "1", null ],
                    "exceptionThrown" : "java.lang.Exception" # optinal, check that the fully qualified exception is thrown
                },
                {
                    "args" : [ "1", null ],
                    "exceptionThrown" : "java.lang.Exception",
                    "exceptionMessage" : "This is a test exception: 1" # optional check that the exception message matches
                },
                {
                    "args" : [ "1", null ],
                    "exceptionMessage" : "This is a test exception: 1"
                },
                {
                    "skip" : true, # optional, skip this test only, default false
                    "args" : [ null, null ]
                }
            ]
        }
    ]
}
}}}

=== Complex method arguments ===
An example of passing beans and arrays

{{{
{
    "unitTest" : [ # required
        {
            "method" : "truncExample2", 
            "testCases" : [
                { 
                  "args" : [ 
                       { "memberData1" : "12", "someVariable" : 6, "anotherVariable" : 4.5 },
                       true,
                       "xyz"
                  ]
                }
            ]
        }
    ]
}
}}}

=== Tips ===
 * If you're having parsing issues with your JSON, try using a JSON lint resource like [http://www.jsonlint.com/]
 * You can add meta-data to the JSON files, for instance key-value pairs that aren't recognized by FuzzTestRunner, for instance:{{{
{
    "unitTest" : [ # required
        {
            "method" : "truncExample2", 
            "testCases" : [
                { 
                  "args" : [ 
                       { "memberData1" : "12", "someVariable" : 6, "anotherVariable" : 4.5 },
                       true,
                       "xyz"
                  ]
                }
            ]
        }
    ]
}
}}} 